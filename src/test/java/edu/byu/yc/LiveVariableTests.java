package edu.byu.yc;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.eclipse.jdt.core.dom.ASTNode;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class LiveVariableTests {

    private static Logger logger = LoggerFactory.getLogger(LiveVariableTests.class);
    /**
     * This test is included to give you a starting point. You will need
     * additional tests in order to create mutation coverage.
     */
    @Test
    public void emptyCFGTest() {
        CFG cfg = Mockito.mock(CFG.class);
        Node exit = ExitNode.getInstance();
        Mockito.when(cfg.exitNode()).thenReturn(exit);
        Mockito.when(cfg.successors(Mockito.any(ASTNode.class)))
                .thenReturn(new HashSet<>());
        Mockito.when(cfg.predecessors(Mockito.any(ASTNode.class)))
                .thenReturn(new HashSet<>());

        LiveVariableAnalysis lva = new LiveVariableAnalyzer(cfg);
        Map<Node, Set<String>> result = lva.analyze();
        assertEquals(0, result.keySet().size());
    }

    /**
     * This test mimics a simple CFG program to see that it is analyzed correctly
     * Program is generated by generateNodesForSimpleCFG.
     */
    @Test
    public void simpleCFGTest() {
        CFG cfg = Mockito.mock(CFG.class);
        Node entry = EntryNode.getInstance();
        Node exit = ExitNode.getInstance();
        List<Node> simpleCFGNodes = TestCfgGenerator.generateNodesForSimpleCFG();
        //Get the nodes of the CFG
        Node node1 = simpleCFGNodes.get(0);
        Node node2 = simpleCFGNodes.get(1);
        Node node3 = simpleCFGNodes.get(2);

        //Entry Node
        Mockito.when(cfg.predecessors(exit)).thenReturn(null);
        Mockito.when(cfg.successors(entry)).thenReturn(getSingleNodeAsSet(node1));

        //Node1
        Mockito.when(cfg.predecessors(node1)).thenReturn(getSingleNodeAsSet(entry));
        Mockito.when(cfg.successors(node1)).thenReturn(getSingleNodeAsSet(node2));

        //Node2
        Mockito.when(cfg.predecessors(node2)).thenReturn(getSingleNodeAsSet(node1));
        Mockito.when(cfg.successors(node2)).thenReturn(getSingleNodeAsSet(node3));

        //Node3
        Mockito.when(cfg.predecessors(node3)).thenReturn(getSingleNodeAsSet(node2));
        Mockito.when(cfg.successors(node3)).thenReturn(getSingleNodeAsSet(exit));

        //Exit Node
        Mockito.when(cfg.exitNode()).thenReturn(exit);
        Mockito.when(cfg.successors(exit)).thenReturn(null);
        Mockito.when(cfg.predecessors(exit)).thenReturn(getSingleNodeAsSet(node3));

        LiveVariableAnalysis lva = new LiveVariableAnalyzer(cfg);
        Map<Node, Set<String>> result = lva.analyze();

        logger.info("Analyzer results: {}", result);

        //Expects 4 nodes since there are 3 nodes + 1 Entry node, do not count exit node
        assertEquals(4, result.keySet().size());


        //Test Node 3 has correct Live Nodes
        Set<String> expectedNode3Set = new HashSet<>();
        expectedNode3Set.add("b");
        expectedNode3Set.add("c");
        assertEquals(expectedNode3Set, result.get(node3));

        //Test Node 2 has correct Live Nodes
        Set<String> expectedNode2Set = new HashSet<>();
        expectedNode2Set.add("b");
        assertEquals(expectedNode2Set, result.get(node2));

        //Test Node 1 has correct Live Nodes
        assertEquals(new HashSet<String>(), result.get(node1));

        //Test Entry Node has correct Live Nodes
        assertEquals(new HashSet<String>(), result.get(entry));

    }

    /**
     * This test mimics a more complex CFG and sees that the LiveVariableAnalyzer works as
     * expected
     */
    @Test
    public void complexCFGTest() {
        CFG cfg = Mockito.mock(CFG.class);
        Node entry = EntryNode.getInstance();
        Node exit = ExitNode.getInstance();
        List<Node> complexCFG = TestCfgGenerator.generateNodesForComplexCFG();
        //Get the nodes of the CFG, There are 16
        Node node1 = complexCFG.get(0);
        Node node2 = complexCFG.get(1);
        Node node3 = complexCFG.get(2);
        Node node4 = complexCFG.get(3);
        Node node5 = complexCFG.get(4);
        Node node6 = complexCFG.get(5);
        Node node7 = complexCFG.get(6);
        Node node8 = complexCFG.get(7);
        Node node9 = complexCFG.get(8);
        Node node10 = complexCFG.get(9);
        Node node11 = complexCFG.get(10);
        Node node12 = complexCFG.get(11);
        Node node13 = complexCFG.get(12);
        Node node14 = complexCFG.get(13);
        Node node15 = complexCFG.get(14);
        Node node16 = complexCFG.get(15);


        //Entry Node
        Mockito.when(cfg.predecessors(exit)).thenReturn(null);
        Mockito.when(cfg.successors(entry)).thenReturn(getSingleNodeAsSet(node1));

        //Node1
        Mockito.when(cfg.predecessors(node1)).thenReturn(getSingleNodeAsSet(entry));
        Mockito.when(cfg.successors(node1)).thenReturn(getSingleNodeAsSet(node2));

        //Node2
        Mockito.when(cfg.predecessors(node2)).thenReturn(getSingleNodeAsSet(node1));
        Mockito.when(cfg.successors(node2)).thenReturn(getSingleNodeAsSet(node3));

        //Node3
        Mockito.when(cfg.predecessors(node3)).thenReturn(getSingleNodeAsSet(node2));
        Mockito.when(cfg.successors(node3)).thenReturn(getSingleNodeAsSet(node4));

        //Node4
        Mockito.when(cfg.predecessors(node4)).thenReturn(getSingleNodeAsSet(node3));
        Set<Node> nodes = new HashSet<>();
        nodes.add(node5);
        nodes.add(exit);
        Mockito.when(cfg.successors(node4)).thenReturn(nodes);


        //Node5
        Mockito.when(cfg.predecessors(node5)).thenReturn(getSingleNodeAsSet(node4));
        nodes = new HashSet<>();
        nodes.add(node6);
        nodes.add(node10);
        Mockito.when(cfg.successors(node5)).thenReturn(nodes);

        //Node6
        Mockito.when(cfg.predecessors(node6)).thenReturn(getSingleNodeAsSet(node5));
        Mockito.when(cfg.successors(node6)).thenReturn(getSingleNodeAsSet(node10));


        //Node7
        Mockito.when(cfg.predecessors(node7)).thenReturn(getSingleNodeAsSet(node6));
        Mockito.when(cfg.successors(node7)).thenReturn(getSingleNodeAsSet(node8));


        //Node8
        Mockito.when(cfg.predecessors(node8)).thenReturn(getSingleNodeAsSet(node7));
        Mockito.when(cfg.successors(node8)).thenReturn(getSingleNodeAsSet(node9));

        //Node9
        Mockito.when(cfg.predecessors(node9)).thenReturn(getSingleNodeAsSet(node8));
        Mockito.when(cfg.successors(node9)).thenReturn(getSingleNodeAsSet(exit));

        //Node10
        Mockito.when(cfg.predecessors(node10)).thenReturn(getSingleNodeAsSet(node5));
        Mockito.when(cfg.successors(node10)).thenReturn(getSingleNodeAsSet(node11));

        //Node11
        Mockito.when(cfg.predecessors(node11)).thenReturn(getSingleNodeAsSet(node10));
        nodes = new HashSet<>();
        nodes.add(node12);
        nodes.add(node13);
        Mockito.when(cfg.successors(node11)).thenReturn(nodes);

        //Node12
        Mockito.when(cfg.predecessors(node12)).thenReturn(getSingleNodeAsSet(node11));
        Mockito.when(cfg.successors(node12)).thenReturn(getSingleNodeAsSet(node14));

        //Node13
        Mockito.when(cfg.predecessors(node13)).thenReturn(getSingleNodeAsSet(node11));
        Mockito.when(cfg.successors(node13)).thenReturn(getSingleNodeAsSet(exit));

        //Node14
        Mockito.when(cfg.predecessors(node14)).thenReturn(getSingleNodeAsSet(node12));
        Mockito.when(cfg.successors(node14)).thenReturn(getSingleNodeAsSet(node15));

        //Node15
        Mockito.when(cfg.predecessors(node15)).thenReturn(getSingleNodeAsSet(node14));
        Mockito.when(cfg.successors(node15)).thenReturn(getSingleNodeAsSet(node16));

        //Node16
        Mockito.when(cfg.predecessors(node16)).thenReturn(getSingleNodeAsSet(node15));
        Mockito.when(cfg.successors(node16)).thenReturn(getSingleNodeAsSet(exit));

        //Exit Node
        Mockito.when(cfg.exitNode()).thenReturn(exit);
        Mockito.when(cfg.successors(exit)).thenReturn(null);

        nodes = new HashSet<>();
        nodes.add(node16);
        nodes.add(node13);
        nodes.add(node9);
        nodes.add(node4);

        Mockito.when(cfg.predecessors(exit)).thenReturn(nodes);

        LiveVariableAnalysis lva = new LiveVariableAnalyzer(cfg);
        Map<Node, Set<String>> result = lva.analyze();

        logger.info("Analyzer results: {}", result);

    }

    private Set<Node> getSingleNodeAsSet(Node node) {
        Set<Node> nodes = new HashSet<>();
        nodes.add(node);
        return nodes;
    }


}
