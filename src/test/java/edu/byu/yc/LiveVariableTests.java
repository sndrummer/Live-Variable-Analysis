package edu.byu.yc;

import static org.junit.jupiter.api.Assertions.assertAll;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.eclipse.jdt.core.dom.ASTNode;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Uses Mockito to test CFG live variable analysis
 */
public class LiveVariableTests {

    private static Logger logger = LoggerFactory.getLogger(LiveVariableTests.class);

    /**
     * This test is included to give you a starting point. You will need
     * additional tests in order to create mutation coverage.
     */
    @Test
    public void emptyCFGTest() {
        CFG cfg = Mockito.mock(CFG.class);
        Node exit = ExitNode.getInstance();
        Mockito.when(cfg.exitNode()).thenReturn(exit);
        Mockito.when(cfg.successors(Mockito.any(ASTNode.class)))
                .thenReturn(new HashSet<>());
        Mockito.when(cfg.predecessors(Mockito.any(ASTNode.class)))
                .thenReturn(new HashSet<>());

        LiveVariableAnalysis lva = new LiveVariableAnalyzer(cfg);
        Map<Node, Set<String>> result = lva.analyze();
        assertEquals(0, result.keySet().size());
    }

    /**
     * This test mimics a simple CFG program to see that it is analyzed correctly
     * Program is generated by generateNodesForSimpleCFG.
     */
    @Test
    public void simpleCFGTest() {
        CFG cfg = Mockito.mock(CFG.class);
        Node entry = new EntryNode();
        Node exit = ExitNode.getInstance();
        List<Node> simpleCFGNodes = TestCfgGenerator.generateNodesForSimpleCFG();
        //Get the nodes of the CFG
        Node node1 = simpleCFGNodes.get(0);
        Node node2 = simpleCFGNodes.get(1);
        Node node3 = simpleCFGNodes.get(2);

        //Entry Node
        Mockito.when(cfg.predecessors(exit)).thenReturn(null);
        Mockito.when(cfg.successors(entry)).thenReturn(getSingleNodeAsSet(node1));

        //Node1
        Mockito.when(cfg.predecessors(node1)).thenReturn(getSingleNodeAsSet(entry));
        Mockito.when(cfg.successors(node1)).thenReturn(getSingleNodeAsSet(node2));

        //Node2
        Mockito.when(cfg.predecessors(node2)).thenReturn(getSingleNodeAsSet(node1));
        Mockito.when(cfg.successors(node2)).thenReturn(getSingleNodeAsSet(node3));

        //Node3
        Mockito.when(cfg.predecessors(node3)).thenReturn(getSingleNodeAsSet(node2));
        Mockito.when(cfg.successors(node3)).thenReturn(getSingleNodeAsSet(exit));

        //Exit Node
        Mockito.when(cfg.exitNode()).thenReturn(exit);
        Mockito.when(cfg.successors(exit)).thenReturn(null);
        Mockito.when(cfg.predecessors(exit)).thenReturn(getSingleNodeAsSet(node3));

        LiveVariableAnalysis lva = new LiveVariableAnalyzer(cfg);
        Map<Node, Set<String>> result = lva.analyze();

        logger.info("Analyzer results: {}", result);

        //Expects 4 nodes since there are 3 nodes + 1 Entry node, do not count exit node
        assertEquals(4, result.keySet().size());

        //Test Node 3 has correct Live Nodes
        Set<String> expectedNode3Set = new HashSet<>();
        expectedNode3Set.add("b");
        expectedNode3Set.add("c");
        assertEquals(expectedNode3Set, result.get(node3));

        //Test Node 2 has correct Live Nodes
        Set<String> expectedNode2Set = new HashSet<>();
        expectedNode2Set.add("b");
        assertEquals(expectedNode2Set, result.get(node2));

        //Test Node 1 has correct Live Nodes
        assertEquals(new HashSet<String>(), result.get(node1));

        //Test Entry Node has correct Live Nodes
        assertEquals(new HashSet<String>(), result.get(entry));

    }

    /**
     * Tests a more complex CFG that has been mocked to see that the LiveVariableAnalyzer works as
     * expected: refer to graph "CFG dnfsort.png" in project to see which a visualization of the CFG
     */
    @Test
    public void complexCFGTest() {
        CFG cfg = setUpComplexCfgMock();

        Node node1 = cfg.getNodes().get(0);
        Node node2 = cfg.getNodes().get(1);
        Node node3 = cfg.getNodes().get(2);
        Node node4 = cfg.getNodes().get(3);
        Node node5 = cfg.getNodes().get(4);
        Node node6 = cfg.getNodes().get(5);
        Node node7 = cfg.getNodes().get(6);
        Node node8 = cfg.getNodes().get(7);
        Node node9 = cfg.getNodes().get(8);
        Node node10 = cfg.getNodes().get(9);
        Node node11 = cfg.getNodes().get(10);
        Node node12 = cfg.getNodes().get(11);
        Node node13 = cfg.getNodes().get(12);
        Node node14 = cfg.getNodes().get(13);
        Node node15 = cfg.getNodes().get(14);
        Node node16 = cfg.getNodes().get(15);

        LiveVariableAnalysis lva = new LiveVariableAnalyzer(cfg);
        Map<Node, Set<String>> result = lva.analyze();

        logger.info("Analyzer results: {}", result);

        //Expects 17 nodes since there are 16 nodes + 1 Entry node, do not count exit node
        assertEquals(17, result.keySet().size());

        assertAll(
                () -> {  //Test Node 16 has correct Live Nodes
                    Set<String> expectedNode16Set = new HashSet<>();
                    assertEquals(expectedNode16Set, result.get(node16));
                },

                () -> {
                    //Test Node 15 has correct Live Nodes
                    Set<String> expectedNode15Set = new HashSet<>();
                    expectedNode15Set.add("arr");
                    expectedNode15Set.add("c");
                    assertEquals(expectedNode15Set, result.get(node15));
                },
                () -> {
                    //Test Node 14 has correct Live Nodes
                    Set<String> expectedNode14Set = new HashSet<>();
                    expectedNode14Set.add("arr");
                    expectedNode14Set.add("c");
                    assertEquals(expectedNode14Set, result.get(node14));

                },
                () -> {
                    //Test Node 13 has correct Live Nodes
                    Set<String> expectedNode13Set = new HashSet<>();
                    expectedNode13Set.add("b");
                    assertEquals(expectedNode13Set, result.get(node13));
                },
                () -> {

                    //Test Node 12 has correct Live Nodes
                    Set<String> expectedNode12Set = new HashSet<>();
                    expectedNode12Set.add("arr");
                    expectedNode12Set.add("c");
                    assertEquals(expectedNode12Set, result.get(node12));
                },
                () -> {
                    //Test Node 11 has correct Live Nodes
                    Set<String> expectedNode11Set = new HashSet<>();
                    expectedNode11Set.add("arr");
                    expectedNode11Set.add("b");
                    expectedNode11Set.add("c");
                    assertEquals(expectedNode11Set, result.get(node11));

                },
                () -> {
                    //Test Node 10 has correct Live Nodes
                    Set<String> expectedNode10Set = new HashSet<>();
                    expectedNode10Set.add("arr");
                    expectedNode10Set.add("b");
                    expectedNode10Set.add("c");
                    assertEquals(expectedNode10Set, result.get(node10));
                },
                () -> {
                    //Test Node 9 has correct Live Nodes
                    Set<String> expectedNode9Set = new HashSet<>();
                    expectedNode9Set.add("b");
                    assertEquals(expectedNode9Set, result.get(node9));
                },
                () -> {

                    //Test Node 8 has correct Live Nodes
                    Set<String> expectedNode8Set = new HashSet<>();
                    expectedNode8Set.add("a");
                    expectedNode8Set.add("b");
                    assertEquals(expectedNode8Set, result.get(node8));
                },
                () -> {

                    //Test Node 7 has correct Live Nodes
                    Set<String> expectedNode7Set = new HashSet<>();
                    expectedNode7Set.add("a");
                    expectedNode7Set.add("b");
                    assertEquals(expectedNode7Set, result.get(node7));

                },
                () -> {

                    //Test Node 6 has correct Live Nodes
                    Set<String> expectedNode6Set = new HashSet<>();
                    expectedNode6Set.add("arr");
                    expectedNode6Set.add("a");
                    expectedNode6Set.add("b");
                    assertEquals(expectedNode6Set, result.get(node6));
                },
                () -> {
                    //Test Node 5 has correct Live Nodes
                    Set<String> expectedNode5Set = new HashSet<>();
                    expectedNode5Set.add("arr");
                    expectedNode5Set.add("a");
                    expectedNode5Set.add("b");
                    expectedNode5Set.add("c");
                    assertEquals(expectedNode5Set, result.get(node5));
                },
                () -> {
                    //Test Node 4 has correct Live Nodes
                    Set<String> expectedNode4Set = new HashSet<>();
                    expectedNode4Set.add("arr");
                    expectedNode4Set.add("a");
                    expectedNode4Set.add("b");
                    expectedNode4Set.add("c");
                    assertEquals(expectedNode4Set, result.get(node4));
                },
                () -> {
                    //Test Node 3 has correct Live Nodes
                    Set<String> expectedNode3Set = new HashSet<>();
                    expectedNode3Set.add("arr");
                    expectedNode3Set.add("a");
                    expectedNode3Set.add("b");
                    assertEquals(expectedNode3Set, result.get(node3));
                },
                () -> {
                    //Test Node 2 has correct Live Nodes
                    Set<String> expectedNode2Set = new HashSet<>();
                    expectedNode2Set.add("arr");
                    expectedNode2Set.add("a");
                    assertEquals(expectedNode2Set, result.get(node2));
                },
                () -> {
                    //Test Node 1 has correct Live Nodes
                    Set<String> expectedNode1Set = new HashSet<>();
                    expectedNode1Set.add("arr");
                    assertEquals(expectedNode1Set, result.get(node1));
                },
                () -> {
                    //Test Entry Node has correct Live Nodes
                    Set<String> expectedEntryNodeSet = new HashSet<>();
                    expectedEntryNodeSet.add("arr");
                    assertEquals(expectedEntryNodeSet, result.get(cfg.entryNode()));
                }
        );

    }

    private CFG setUpComplexCfgMock() {
        CFG cfg = Mockito.mock(CFG.class);
        Node entry = new EntryNode();
        Node exit = ExitNode.getInstance();
        List<Node> cfgNodes = TestCfgGenerator.generateNodesForComplexCFG();
        //Get the nodes of the CFG, There are 16
        Node node1 = cfgNodes.get(0);
        Node node2 = cfgNodes.get(1);
        Node node3 = cfgNodes.get(2);
        Node node4 = cfgNodes.get(3);
        Node node5 = cfgNodes.get(4);
        Node node6 = cfgNodes.get(5);
        Node node7 = cfgNodes.get(6);
        Node node8 = cfgNodes.get(7);
        Node node9 = cfgNodes.get(8);
        Node node10 = cfgNodes.get(9);
        Node node11 = cfgNodes.get(10);
        Node node12 = cfgNodes.get(11);
        Node node13 = cfgNodes.get(12);
        Node node14 = cfgNodes.get(13);
        Node node15 = cfgNodes.get(14);
        Node node16 = cfgNodes.get(15);

        Mockito.when(cfg.getNodes()).thenReturn(cfgNodes);


        //Entry Node
        Mockito.when(cfg.predecessors(entry)).thenReturn(null);
        Mockito.when(cfg.successors(entry)).thenReturn(getSingleNodeAsSet(node1));

        //Node1
        Mockito.when(cfg.predecessors(node1)).thenReturn(getSingleNodeAsSet(entry));
        Mockito.when(cfg.successors(node1)).thenReturn(getSingleNodeAsSet(node2));

        //Node2
        Mockito.when(cfg.predecessors(node2)).thenReturn(getSingleNodeAsSet(node1));
        Mockito.when(cfg.successors(node2)).thenReturn(getSingleNodeAsSet(node3));

        //Node3
        Mockito.when(cfg.predecessors(node3)).thenReturn(getSingleNodeAsSet(node2));
        Mockito.when(cfg.successors(node3)).thenReturn(getSingleNodeAsSet(node4));

        //Node4
        Mockito.when(cfg.predecessors(node4)).thenReturn(getSingleNodeAsSet(node3));
        Set<Node> nodes = new HashSet<>();
        nodes.add(node5);
        nodes.add(exit);
        Mockito.when(cfg.successors(node4)).thenReturn(nodes);


        //Node5
        Mockito.when(cfg.predecessors(node5)).thenReturn(getSingleNodeAsSet(node4));
        nodes = new HashSet<>();
        nodes.add(node6);
        nodes.add(node10);
        Mockito.when(cfg.successors(node5)).thenReturn(nodes);

        //Node6
        Mockito.when(cfg.predecessors(node6)).thenReturn(getSingleNodeAsSet(node5));
        Mockito.when(cfg.successors(node6)).thenReturn(getSingleNodeAsSet(node10));


        //Node7
        Mockito.when(cfg.predecessors(node7)).thenReturn(getSingleNodeAsSet(node6));
        Mockito.when(cfg.successors(node7)).thenReturn(getSingleNodeAsSet(node8));


        //Node8
        Mockito.when(cfg.predecessors(node8)).thenReturn(getSingleNodeAsSet(node7));
        Mockito.when(cfg.successors(node8)).thenReturn(getSingleNodeAsSet(node9));

        //Node9
        Mockito.when(cfg.predecessors(node9)).thenReturn(getSingleNodeAsSet(node8));
        Mockito.when(cfg.successors(node9)).thenReturn(getSingleNodeAsSet(exit));

        //Node10
        Mockito.when(cfg.predecessors(node10)).thenReturn(getSingleNodeAsSet(node5));
        Mockito.when(cfg.successors(node10)).thenReturn(getSingleNodeAsSet(node11));

        //Node11
        Mockito.when(cfg.predecessors(node11)).thenReturn(getSingleNodeAsSet(node10));
        nodes = new HashSet<>();
        nodes.add(node12);
        nodes.add(node13);
        Mockito.when(cfg.successors(node11)).thenReturn(nodes);

        //Node12
        Mockito.when(cfg.predecessors(node12)).thenReturn(getSingleNodeAsSet(node11));
        Mockito.when(cfg.successors(node12)).thenReturn(getSingleNodeAsSet(node14));

        //Node13
        Mockito.when(cfg.predecessors(node13)).thenReturn(getSingleNodeAsSet(node11));
        Mockito.when(cfg.successors(node13)).thenReturn(getSingleNodeAsSet(exit));

        //Node14
        Mockito.when(cfg.predecessors(node14)).thenReturn(getSingleNodeAsSet(node12));
        Mockito.when(cfg.successors(node14)).thenReturn(getSingleNodeAsSet(node15));

        //Node15
        Mockito.when(cfg.predecessors(node15)).thenReturn(getSingleNodeAsSet(node14));
        Mockito.when(cfg.successors(node15)).thenReturn(getSingleNodeAsSet(node16));

        //Node16
        Mockito.when(cfg.predecessors(node16)).thenReturn(getSingleNodeAsSet(node15));
        Mockito.when(cfg.successors(node16)).thenReturn(getSingleNodeAsSet(exit));

        //Exit Node
        Mockito.when(cfg.exitNode()).thenReturn(exit);
        Mockito.when(cfg.entryNode()).thenReturn(entry);
        Mockito.when(cfg.successors(exit)).thenReturn(null);

        nodes = new HashSet<>();
        nodes.add(node16);
        nodes.add(node13);
        nodes.add(node9);
        nodes.add(node4);

        Mockito.when(cfg.predecessors(exit)).thenReturn(nodes);

        return cfg;
    }

    private Set<Node> getSingleNodeAsSet(Node node) {
        Set<Node> nodes = new HashSet<>();
        nodes.add(node);
        return nodes;
    }

}
